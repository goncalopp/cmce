#!/bin/bash

###################################################################################
# UCK - Ubuntu Customization Kit                                                  #
# Copyright (C) 2006-2010 UCK Team                                                #
#                                                                                 #
# UCK is free software: you can redistribute it and/or modify                     #
# it under the terms of the GNU General Public License as published by            #
# the Free Software Foundation, either version 3 of the License, or               #
# (at your option) any later version.                                             #
#                                                                                 #
# UCK is distributed in the hope that it will be useful,                          #
# but WITHOUT ANY WARRANTY; without even the implied warranty of                  #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                   #
# GNU General Public License for more details.                                    #
#                                                                                 #
# You should have received a copy of the GNU General Public License               #
# along with UCK.  If not, see <http://www.gnu.org/licenses/>.                    #
###################################################################################

function failure()
{
	echo "$@"
	exit 1
}

function prepare_install()
{
	#try 2 times to avoid slow proxies failures
	apt-get update || apt-get update || failure "apt-get update failed, error=$?"
}

function install_packages()
{
	apt-get install --assume-yes --force-yes "$@" || failure "apt-get install $@ failed, error=$?"
}

function remove_packages()
{
	apt-get --purge remove --assume-yes --force-yes "$@" || failure "apt-get remove $@ failed, error=$?"
}

function run_console()
{
	echo "Starting console application..."
	
	CONSOLE_APP=`which konsole`
	CONSOLE_APP_OPTIONS=(--caption "UCK customization console" -e /bin/bash)
	if [ "$CONSOLE_APP" = "" ]; then
		CONSOLE_APP=`which gnome-terminal`
		CONSOLE_APP_OPTIONS=(-t "UCK customization console" -e /bin/bash)
	fi
	if [ "$CONSOLE_APP" = "" ]; then
		CONSOLE_APP=`which xfce4-terminal`
		CONSOLE_APP_OPTIONS=(-t "UCK customization console" -e /bin/bash)
	fi
	if [ "$CONSOLE_APP" = "" ]; then
		CONSOLE_APP=`which xterm`
		CONSOLE_APP_OPTIONS=(-title "UCK customization console" -e /bin/bash)
	fi
	
	if [ "$CONSOLE_APP" = "" ]; then
		dialog_msgbox "Failure" "Unable to find any console application"
	else
		eval `dbus-launch --sh-syntax --exit-with-session 2>/dev/null`
		$CONSOLE_APP "${CONSOLE_APP_OPTIONS[@]}"
		RESULT=$?
	
		if [ $RESULT -ne 0 ]; then
			echo "Running console application $CONSOLE_APP failed, trying the fallback xterm"
			xterm -title "UCK customization console" -e /bin/bash
			RESULT=$?
			if [ $RESULT -ne 0 ]; then
				dialog_msgbox "Failure" "Running console application $CONSOLE_APP failed, error=$RESULT"
			fi
		fi
	fi
}

SCRIPT_DIR=`dirname "$0"`

# Inherit environment
[ -f "$SCRIPT_DIR/environment" ] &&
	. "$SCRIPT_DIR/environment"

LIVECD_LANGS=`cat "$SCRIPT_DIR/language_packs"`
RUN_MANUAL_CUSTOMIZATIONS=`cat "$SCRIPT_DIR/run_manual_customizations"`
DESKTOP_TYPE=`cat "$SCRIPT_DIR/desktop_type"`

DESKTOP_FLAVOURS=`cat "$SCRIPT_DIR/desktop_types"`

# Print some information on the system being customized:
rel="`lsb_release -is` `lsb_release -rs`"
kernel=`ls /boot/config-* | sed 's/.*config-//'`
arch=`if [ -d /lib64 ]; then echo x86_64; else echo i586; fi`
echo ">> Customizing: $rel, $kernel $arch"

prepare_install || failure "Preparing installation failed, error=$?"

# List of packages to install to support the selected languages:
PACKAGES_TO_INSTALL=""
# Pattern to match all selected language packs:
LANGPACKS_CONCATENATED=""
# List of language related packages available in the repositories:
REPO_LANGS=`apt-cache search "^language-" | sed 's/[ 	].*//'`

echo "Installing language packs ($LIVECD_LANGS)..."
if [ -n "$LIVECD_LANGS" ]; then
	for l in $LIVECD_LANGS; do
		# Add language specific packages not releated to kde or gnome
		add=`echo "$REPO_LANGS" | grep -- -"$l" | grep -Ev "kde|gnome"`
		PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL $add"
	
		# Add desktop specific language packages
		if [ -n "$DESKTOP_FLAVOURS" ]; then
			for f in $DESKTOP_FLAVOURS; do
				add=`echo "$REPO_LANGS" | grep -- -$f-$l`
				PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL $add"
			done
		fi
	
		if [ -z "$LANGPACKS_CONCATENATED" ]; then
			LANGPACKS_CONCATENATED="$l"
		else
			LANGPACKS_CONCATENATED="$LANGPACKS_CONCATENATED|$l"
		fi
	done
	
	install_packages $PACKAGES_TO_INSTALL ||
		failure "Installing language packs failed, error=$?"
	
	# NOTE:	we first install selected language packs, then remove others as
	#	installing a language pack might pull in packages that were not
	#	previously present
	echo "Removing unnecessary language packages..."
	REMOVED_PACKAGES=`dpkg-query --show | cut -f1 | grep -E '^(language-pack|language-support)' | grep -Ev "[-]($LANGPACKS_CONCATENATED)\>"`
	remove_packages $REMOVED_PACKAGES ||

		failure "Removing packages failed, error=$?"
fi



if [ "$RUN_MANUAL_CUSTOMIZATIONS" = "yes" ] ; then
	export DISPLAY=:25
	VNC_PORT=21693
	VNC_ALLOW_IP=127.0.0.1
	CUSTOMIZATION_USER=customization-user
	eval `dbus-launch --sh-syntax --exit-with-session 2>/dev/null`
	#enable universe repository to install xvfb, x11vnc
	cp -a /etc/apt/sources.list sources.list.bak
	sed 's/^#deb \(.*\)caixamagica\.pt\(.*\)universe/deb \1caixamagica.pt\2universe/' sources.list.bak > /etc/apt/sources.list
	#TODO: create user, su to it, etc
	apt-get update || apt-get update
	install_packages xvfb x11vnc
	#useradd $CUSTOMIZATION_USER --create-home
	Xvfb $DISPLAY -screen 0 800x600x16 &
	XVFB_PID=$!
	sleep 1
	x11vnc -display $DISPLAY -rfbport $VNC_PORT -nopw -listen $VNC_ALLOW_IP -xkb &
	X11VNC_PID=$!
	sleep 1
	echo "running graphical environment..."
	gnome-session || startkde || failure "failed to run desktop environment"
	kill -9 $X11VNC_PID
	kill -9 $XVFB_PID
	#copy customized home, for later recreation
	cp -pR /root /customization-home
	remove_packages xvfb x11vnc
	cp -a sources.list.bak /etc/apt/sources.list
	#userdel --remove $CUSTOMIZATION_USER
fi

echo "Done"
